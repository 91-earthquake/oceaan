
#pragma config(Sensor, S2,     GyroSensor,     sensorI2CHiTechnicGyro)
#pragma config(Motor,  motorA,          MotorDrive1,   tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          MotorDrive2,   tmotorNXT, PIDControl, encoder)

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


float currHoek;
int offset = 598;

task getHoek () {
	float delTime = 0;    //delta time
	float prevHoek = 0;   //vorige hoek
	float curRate = 0;    //huidige snelheid
  
	
while(true) {

time1[T1] = 0;
    //De huidige snelheid van de hoek meten
    curRate = SensorValue[GyroSensor] - offset;
    //Als de huidige snelheid groter is dan 3 graden / seconde
    if (abs(curRate) > 3) {
    	//De vorige hoek wordt de hudige hoek
      prevHoek = currHoek;
      //De nieuwe hoek wordt de vorige hoek + de snelheid (currate) * de tijd 
      currHoek = prevHoek + curRate * delTime;
      //Zorg dat de hoek tussen 0 en 360 gragen blijft
      if (currHoek > 360) currHoek -= 360;
      else if (currHoek < 0) currHoek += 360;
    }
    //Wachten 5 ms
    wait1Msec(5);
    //Bereken het verschil in tijd, ten opzichte van de vorige meting
    delTime = ((float)time1[T1]) / 1000;
  }


}


	task main()
{
	startTask(getHoek);
		while(true)
{



	//rij 3 seconden vooruit

			motor[MotorDrive1] = 50;
			motor[MotorDrive2] = 50;
			wait1Msec(3000);

		  motor[MotorDrive1] = 0;
		  motor[MotorDrive2] = 0;




		if( abs(currHoek) >  0 && abs (currHoek) <90)
		{

		motor[MotorDrive1] = 0;
		motor[MotorDrive2] = 0;

		}


		else if (currHoek == 90) {

		motor[MotorDrive1] = 0;
		motor[MotorDrive2] = 0;




		}


		wait1Msec(10);

     	 }
 }
